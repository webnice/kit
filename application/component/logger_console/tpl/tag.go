// Package tpl
package tpl

// Теги шаблонизатора для вывода данных.
func (ses *session) tagData() (ret map[string]*tagDataInfo) {
	ret = map[string]*tagDataInfo{
		"timestamp": {
			Name: "timestamp",
			Func: ses.fnTimestamp,
			Docs: []string{
				"Поле: Message.Timestamp.",
				"Время записи.",
				"После первого двоеточия указывается зона времени, если не указана, используется UTC зона времени.",
				"После второго двоеточия указывается формат времени, синтаксис time.Format.layout.",
			},
			Example: "${timestamp:Europe/Moscow:2006-01-02T15:04:05.000Z07:00}",
		},
		"level": {
			Name: "level",
			Func: ses.fnLevel,
			Docs: []string{
				"Поле: Message.Level.",
				"Уровень логирования сообщения.",
				"После первого двоеточия указывается тип, после второго двоеточия указывается длинна.",
				"Тип s или S - Строковое представления уровня логирования.",
				"S в верхнем регистре, выведет название в верхнем регистре.",
				"Длинна, для строки, указывает длину строки в символах, если строка меньше, тогда строка " +
					"дополняется пробелами в конце.",
				"d - Числовое представление уровня логирования.",
				"Длинна для числа, указывает количество цифр, число дополняется нулями спереди.",
			},
			Example: "${level:S:1}",
		},
		"message": {
			Name: "message",
			Func: ses.fnMessage,
			Docs: []string{
				"Поле: Message.Pattern и Message.Argument.",
				"Шаблон и параметры шаблона, сообщения лога в виде сформированного сообщения.",
				"Число после первого двоеточия указывает минимальную длину строки.",
				"Число после второго двоеточия указывает максимальную длину строки.",
				"Если длинна сообщения меньше или больше, оно будет обрезано или дополнено пробелами в конце " +
					"строки.",
			},
			Example: "${message:0:0}",
		},
		"keys": {
			Name: "keys",
			Func: ses.fnKeys,
			Docs: []string{
				"Поле: Message.Keys.",
				"Ключи сообщения.",
				"После первого двоеточия указывается строка-резделитель между ключём и значением.",
				"После второго двоеточия указывается строка-разделитель между парами ключ=значение.",
			},
			Example: "${keys:=:, }",
		},
		"stacktrace": {
			Name: "stacktrace",
			Func: ses.fnStacktrace,
			Docs: []string{
				"Поле: Message.Trace.StackTrace.",
				"Стек вызовов активного процесса, обрезанный до функции вызова.",
				"Многострочная длинная строка очерёдности вызовов.",
				"После двоеточия указывается максимальная длинна сообщения, если сообщения больше указанной " +
					"длинны, оно будет обрезано в конце.",
			},
			Example: "${stacktrace:0}",
		},
		"longfile": {
			Name: "longfile",
			Func: ses.fnLongfile,
			Docs: []string{
				"Поле: Message.Trace.FilenameLong.",
				"Путь и имя файла приложения из которого был совершён вызов.",
				"После двоеточия указывается максимальная длинна сообщения, если сообщения больше указанной " +
					"длинны, оно будет обрезано в конце.",
			},
			Example: "${longfile:0}",
		},
		"shortfile": {
			Name: "shortfile",
			Func: ses.fnShortfile,
			Docs: []string{
				"Поле: Message.Trace.FilenameShort.",
				"Название файла из которого был совершён вызов.",
				"После двоеточия указывается максимальная длинна сообщения, если сообщения больше указанной " +
					"длинны, оно будет обрезано в конце.",
			},
			Example: "${shortfile:0}",
		},
		"function": {
			Name: "function",
			Func: ses.fnFunction,
			Docs: []string{
				"Поле: Message.Trace.Function.",
				"Название функции совершившей вызов.",
				"После двоеточия указывается максимальная длинна сообщения, если сообщения больше указанной " +
					"длинны, оно будет обрезано в конце.",
			},
			Example: "${function:0}",
		},
		"line": {
			Name: "line",
			Func: ses.fnLine,
			Docs: []string{
				"Поле: Message.Trace.Line.",
				"Номер строки файла из которого был совершён вызов.",
			},
			Example: "${line}",
		},
		"package": {
			Name: "package",
			Func: ses.fnPackage,
			Docs: []string{
				"Поле: Message.Trace.Package.",
				"Название пакета.",
				"После двоеточия указывается максимальная длинна сообщения, если сообщения больше указанной " +
					"длинны, оно будет обрезано в конце.",
			},
			Example: "${package:0}",
		},
	}

	return
}

// Теги шаблонизатора для управления цветом.
func (ses *session) tagColor() (ret map[string]*tagDataInfo) {
	ret = map[string]*tagDataInfo{
		"dye": {
			Name: "dye",
			Func: ses.fnColorSet,
			Docs: []string{
				"Управление окрашиванием текста и фона выводимого сообщения.",
				"Тег имеет от одного до трёх параметров, подробности в doc.go.",
			},
			Example: "${dye}",
		},
	}

	return
}

// Теги шаблонизатора для управления форматированием.
func (ses *session) tagFormat() (ret map[string]*tagFormatInfo) {
	ret = map[string]*tagFormatInfo{
		"#": {
			Name:    "#",
			Docs:    []string{"Комментарий в шаблоне, после двоеточия можно писать любой текст."},
			Example: "${#:}",
		},
		"bp--": {
			Name:    "bp--",
			Docs:    []string{"Удаление тега и переносов строки (символы \\r\\n), идущих после тега."},
			Example: "${bp--}",
		},
		"bp-+": {
			Name: "bp-+",
			Docs: []string{
				"Вставка переноса строки (символ \\n) вместо тега.",
				"После первого двоеточия указывается количество вставляемых переносов. Если параметр не указан или " +
					"указан равный нулю, вставляется один перенос.",
			},
			Example: "${bp-+:0}",
		},
		"spc--": {
			Name: "spc--",
			Docs: []string{
				"Удаление тега и всех пробельных символов идущих после тега.",
				"После первого двоеточия указывается количество вставляемых пробелов вместо тега. Если параметр не " +
					"указан или указан равный нулю, не вставляется ничего.",
			},
			Example: "${spc--:0}",
		},
		"--spc": {
			Name: "--spc",
			Docs: []string{
				"Удаление тега и всех пробельных символов идущих перед тегом.",
				"После первого двоеточия указывается количество вставляемых пробелов вместо тега. Если параметр не " +
					"указан или указан равный нулю, не вставляется ничего.",
			},
			Example: "${--spc:0}",
		},
		"-spc-": {
			Name: "-spc-",
			Docs: []string{
				"Удаление тега и всех пробельных символов идущих как перед тегом, так и после тега.",
				"После первого двоеточия указывается количество вставляемых пробелов вместо тега. Если параметр не " +
					"указан или указан равный нулю, не вставляется ничего.",
			},
			Example: "${-spc-:0}",
		},
	}

	return
}
